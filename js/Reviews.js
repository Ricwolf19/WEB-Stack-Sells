// Clase que representa una rese√±a
class Rese√±a {
  constructor(usuario, puntuacion, comentario) {
    this.usuario = usuario;
    this.puntuacion = puntuacion;
    this.comentario = comentario;
  }

  obtenerHTML() {
    // Crear el contenedor principal de la tarjeta de rese√±a
    const card = document.createElement('div');
    card.classList.add('review-card');
    
    // Crear el borde de la tarjeta de rese√±a
    const border = document.createElement('div');
    border.classList.add('review-border');
    card.appendChild(border);
    
    // Crear el √≠cono del usuario
    const usuarioIcono = document.createElement('span');
    usuarioIcono.classList.add('user-icon');
    usuarioIcono.textContent = 'üë§';
    usuarioIcono.style.fontSize = '50px'; // Ajustar el tama√±o del √≠cono seg√∫n sea necesario
    
    // Crear el contenedor de las estrellas para la puntuaci√≥n
    const stars = document.createElement('div');
    stars.classList.add('stars');
    
    // Generar las estrellas seg√∫n la puntuaci√≥n recibida
    const rating = parseInt(this.puntuacion);
    for (let i = 0; i < 5; i++) {
      const star = document.createElement('span');
      star.textContent = i < rating ? '‚≠ê' : ' '; // Mostrar estrella llena o vac√≠a seg√∫n la puntuaci√≥n
      star.style.color = '#FFD700'; // Establecer el color amarillo para las estrellas
      stars.appendChild(star);
    }
    
    // Crear el contenedor de la informaci√≥n de la rese√±a
    const info = document.createElement('div');
    info.classList.add('review-info');
    info.innerHTML = `
      <p><strong>Usuario:</strong> <em>${this.usuario}</em></p>
      <p><strong>Puntuaci√≥n:</strong> <em>${this.puntuacion}</em></p>
      <p><strong>Comentario:</strong> <em>${this.comentario}</em></p>
    `;
    info.style.marginLeft = '10px'; // Ajustar el margen izquierdo seg√∫n sea necesario
    
    // Agregar los elementos creados al contenedor principal de la tarjeta
    card.appendChild(usuarioIcono);
    card.appendChild(stars); // Agregar las estrellas al elemento de la tarjeta
    card.appendChild(info);
    
    // Establecer estilos para la tarjeta de rese√±a
    card.style.padding = '15px'; // Espaciado interno
    card.style.marginBottom = '15px'; // Espaciado inferior
    card.style.backgroundColor = '#f9f9f9'; // Color de fondo
    card.style.display = 'inline-block'; // Mostrar las tarjetas una al lado de la otra
    card.style.width = 'calc(25% - 20px)'; // Definir el ancho para que quepan 4 tarjetas en una fila

    // Funci√≥n para generar un color aleatorio excluyendo el blanco (#FFFFFF)
    function getRandomColor() {
      const purpleBlueColors = ['#0000FF', '#9370DB', '#8A2BE2', '#4B0082', '#483D8B', '#6A5ACD', '#8A2BE2', '#483D8B', '#00008B', '#0000CD', '#4169E1', '#6495ED', '#1E90FF', '#4682B4', '#87CEEB', '#87CEFA', '#00BFFF', '#ADD8E6', '#B0C4DE', '#5F9EA0'];
      const randomIndex = Math.floor(Math.random() * purpleBlueColors.length);
      return purpleBlueColors[randomIndex];
    }    

    // Generar un color aleatorio para el borde excluyendo el blanco
    let randomColor = getRandomColor();
    while (randomColor === '#FFFFFF') {
      randomColor = getRandomColor(); // Si el color generado es blanco, generar uno nuevo
    }
    border.style.border = `2px solid ${randomColor}`; // Aplicar borde con el color aleatorio
    
    return card; // Devolver la tarjeta de rese√±a completa
  }  
}

// Array que almacena las rese√±as existentes
const rese√±as = [
  new Rese√±a('Messi', 4, 'Gran experiencia de compra en Stack Sells. ¬°Recomiendo totalmente!'),
  new Rese√±a('Ronaldo', 5, 'Productos de alta calidad y entrega r√°pida. ¬°Volver√© a comprar!'),
  new Rese√±a('Neymar', 3, 'Buen servicio al cliente, pero el env√≠o fue un poco lento.'),
  new Rese√±a('Mbapp√©', 4, 'Variedad de productos y precios justos. Buena experiencia.'),
  new Rese√±a('Haaland', 2, 'Producto defectuoso recibido. La devoluci√≥n fue complicada.'),
  new Rese√±a('Lewandowski', 5, 'Incre√≠ble selecci√≥n de productos. R√°pido y eficiente.'),
  new Rese√±a('Salah', 3, 'El producto no cumpli√≥ completamente con mis expectativas.'),
  new Rese√±a('Kane', 4, 'Gran calidad y atenci√≥n al cliente. Env√≠o r√°pido.'),
  new Rese√±a('De Bruyne', 5, '¬°Me encanta comprar aqu√≠! Todo siempre llega perfecto.'),
  new Rese√±a('Sterling', 2, 'Problemas con la facturaci√≥n. El servicio al cliente fue √∫til.'),
  new Rese√±a('Su√°rez', 4, 'Buenos precios y entrega r√°pida. Sin quejas.'),
  new Rese√±a('Griezmann', 5, 'Productos √∫nicos y de alta calidad. Muy satisfecho.'),
  new Rese√±a('Kroos', 3, 'La interfaz del sitio web podr√≠a mejorar. Buena variedad.'),
  new Rese√±a('Modric', 4, 'F√°cil proceso de compra. Productos bien embalados.'),
  new Rese√±a('Pogba', 5, '¬°Maravilloso! Gran atenci√≥n al cliente y productos exclusivos.'),
  new Rese√±a('Kante', 3, 'Algunos productos estaban agotados. Buena experiencia en general.'),
  new Rese√±a('Ramos', 4, 'Precios competitivos. Env√≠o dentro del plazo estimado.'),
  new Rese√±a('Neuer', 5, 'Nunca decepciona. Siempre encuentro lo que necesito.'),
  new Rese√±a('Hazard', 3, 'Atenci√≥n al cliente receptiva. La calidad del producto podr√≠a mejorar.'),
  new Rese√±a('Lloris', 4, 'Sitio confiable. Buenos precios y servicio r√°pido.'),  
];

// Agregar las rese√±as existentes al array de rese√±as
rese√±as.push(...getReviewsFromLocalStorage());

// Funci√≥n para obtener las rese√±as existentes desde el almacenamiento local
function getReviewsFromLocalStorage() {
  const reviews = JSON.parse(localStorage.getItem('reviews') || '[]');
  return reviews.map(review => new Rese√±a(review.usuario, review.puntuacion, review.comentario));
}

// Funci√≥n para mostrar las rese√±as existentes en la interfaz
function mostrarRese√±asHTML() {
  const rese√±asDiv = document.getElementById('rese√±as-container');
  rese√±asDiv.innerHTML = '';

  // Recorre todas las rese√±as y las agrega a la interfaz
  rese√±as.forEach(rese√±a => {
    const card = rese√±a.obtenerHTML();
    rese√±asDiv.appendChild(card);
  });
}

// Evento que se ejecuta cuando la ventana se ha cargado completamente
window.addEventListener('load', () => {
  mostrarRese√±asHTML();
});

// Funci√≥n para permitir a los usuarios dejar una nueva rese√±a
function dejarRese√±a() {
  const nombre = prompt('Ingresa tu nombre:');
  const puntuacion = prompt('Califica del 1 al 5:');
  const comentario = prompt('Deja tu comentario:');

  // Verifica que se hayan ingresado todos los campos necesarios
  if (nombre && puntuacion && comentario) {
    // Crea una nueva instancia de Rese√±a y la agrega al array de rese√±as
    const nuevaRese√±a = new Rese√±a(nombre, parseInt(puntuacion), comentario);
    rese√±as.push(nuevaRese√±a);
    
    localStorage.setItem('reviews', JSON.stringify(rese√±as));

    // Muestra las rese√±as actualizadas en la interfaz
    mostrarRese√±asHTML();
  } else {
    alert('Ingresa todos los campos para dejar una rese√±a v√°lida.');
  }
}

/*
Documentacion de Reviews.js

1. **`Rese√±a` Clase:**
   - Representa una rese√±a.
   - Utiliza una clase para organizar la informaci√≥n relacionada con una rese√±a.

2. **`rese√±as` Array:**
   - Almacena las rese√±as existentes.
   - Un ejemplo de estructura de datos tipo lista (array) para gestionar las rese√±as.

3. **`obtenerHTML` M√©todo:**
   - Devuelve el HTML necesario para mostrar la informaci√≥n de una rese√±a en la interfaz.
   - Encapsula la l√≥gica de presentaci√≥n dentro de la propia clase.

4. **`mostrarRese√±asHTML` Funci√≥n:**
   - Muestra las rese√±as existentes en la interfaz.
   - Utiliza un bucle para recorrer el array de rese√±as y agregarlas a la lista en el documento HTML.

5. **Event Listeners:**
   - El evento `load` asegura que las rese√±as se muestren cuando la p√°gina se carga.
   - La funci√≥n `dejarRese√±a` permite a los usuarios dejar una nueva rese√±a y actualiza la interfaz.

*/
